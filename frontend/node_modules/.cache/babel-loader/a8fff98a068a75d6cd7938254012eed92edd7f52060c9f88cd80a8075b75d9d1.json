{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hweth\\\\OneDrive\\\\Desktop\\\\Innovera\\\\Rapid Prototyping\\\\ArguMate\\\\frontend\\\\src\\\\pages\\\\ClaimsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { generateClaims, getAIEvidence, getDocumentEvidence, uploadDocument } from '../services/apiClient';\nimport ClaimsList from '../components/ClaimsList';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ClaimsPage() {\n  _s();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [problemStatement, setProblemStatement] = useState('');\n  const [productDescription, setProductDescription] = useState('');\n  const [claims, setClaims] = useState([]);\n  const [selectedClaim, setSelectedClaim] = useState(null);\n  const [documents, setDocuments] = useState([]);\n  const handleGenerateClaims = async e => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      const generatedClaims = await generateClaims(problemStatement, productDescription);\n      setClaims(generatedClaims);\n    } catch (error) {\n      alert(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleAddManualEvidence = (claimId, evidence) => {\n    setClaims(claims.map(claim => claim.id === claimId ? {\n      ...claim,\n      evidence: [...(claim.evidence || []), {\n        type: 'manual',\n        content: evidence\n      }]\n    } : claim));\n  };\n  const handleAskAI = async claimId => {\n    setLoading(true);\n    try {\n      const claim = claims.find(c => c.id === claimId);\n      const evidence = await getAIEvidence(claim.text, {\n        problemStatement,\n        productDescription\n      });\n      setClaims(claims.map(c => c.id === claimId ? {\n        ...c,\n        evidence: [...(c.evidence || []), {\n          type: 'ai',\n          content: evidence\n        }]\n      } : c));\n    } catch (error) {\n      alert(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    try {\n      const uploadedDoc = await uploadDocument(file);\n      setDocuments([...documents, uploadedDoc]);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n  const handleAskDocuments = async claimId => {\n    if (documents.length === 0) {\n      alert('Please upload documents first');\n      return;\n    }\n    setLoading(true);\n    try {\n      const claim = claims.find(c => c.id === claimId);\n      const evidence = await getDocumentEvidence(claim.text, documents.map(d => d.id));\n      setClaims(claims.map(c => c.id === claimId ? {\n        ...c,\n        evidence: [...(c.evidence || []), {\n          type: 'document',\n          content: evidence\n        }]\n      } : c));\n    } catch (error) {\n      alert(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleProceedToSummary = () => {\n    // Check if all claims have evidence\n    const allClaimsHaveEvidence = claims.every(claim => claim.evidence && claim.evidence.length > 0);\n    if (allClaimsHaveEvidence) {\n      navigate('/summary', {\n        state: {\n          claims\n        }\n      });\n    } else {\n      alert('Please provide evidence for all claims before proceeding');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"claims-page\",\n    children: [claims.length === 0 && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleGenerateClaims,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: problemStatement,\n        onChange: e => setProblemStatement(e.target.value),\n        placeholder: \"Enter problem statement\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: productDescription,\n        onChange: e => setProductDescription(e.target.value),\n        placeholder: \"Enter product description\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: \"Generate Claims\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), claims.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ClaimsList, {\n        claims: claims,\n        onSelectClaim: setSelectedClaim,\n        onAddManualEvidence: handleAddManualEvidence,\n        onAskAI: handleAskAI,\n        onAskDocuments: handleAskDocuments\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"document-upload\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.csv\",\n          onChange: handleFileUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleProceedToSummary,\n        disabled: loading || !claims.every(claim => {\n          var _claim$evidence;\n          return ((_claim$evidence = claim.evidence) === null || _claim$evidence === void 0 ? void 0 : _claim$evidence.length) > 0;\n        }),\n        children: \"Proceed to Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(ClaimsPage, \"+mta0t5mPhInRqTwXwC/78V6Thw=\", false, function () {\n  return [useNavigate];\n});\n_c = ClaimsPage;\nexport default ClaimsPage;\nvar _c;\n$RefreshReg$(_c, \"ClaimsPage\");","map":{"version":3,"names":["React","useState","useNavigate","generateClaims","getAIEvidence","getDocumentEvidence","uploadDocument","ClaimsList","jsxDEV","_jsxDEV","Fragment","_Fragment","ClaimsPage","_s","navigate","loading","setLoading","problemStatement","setProblemStatement","productDescription","setProductDescription","claims","setClaims","selectedClaim","setSelectedClaim","documents","setDocuments","handleGenerateClaims","e","preventDefault","generatedClaims","error","alert","message","handleAddManualEvidence","claimId","evidence","map","claim","id","type","content","handleAskAI","find","c","text","handleFileUpload","event","file","target","files","uploadedDoc","handleAskDocuments","length","d","handleProceedToSummary","allClaimsHaveEvidence","every","state","className","children","onSubmit","value","onChange","placeholder","required","fileName","_jsxFileName","lineNumber","columnNumber","disabled","onSelectClaim","onAddManualEvidence","onAskAI","onAskDocuments","accept","onClick","_claim$evidence","_c","$RefreshReg$"],"sources":["C:/Users/hweth/OneDrive/Desktop/Innovera/Rapid Prototyping/ArguMate/frontend/src/pages/ClaimsPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { generateClaims, getAIEvidence, getDocumentEvidence, uploadDocument } from '../services/apiClient';\r\nimport ClaimsList from '../components/ClaimsList';\r\n\r\nfunction ClaimsPage() {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n  const [problemStatement, setProblemStatement] = useState('');\r\n  const [productDescription, setProductDescription] = useState('');\r\n  const [claims, setClaims] = useState([]);\r\n  const [selectedClaim, setSelectedClaim] = useState(null);\r\n  const [documents, setDocuments] = useState([]);\r\n\r\n  const handleGenerateClaims = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    try {\r\n      const generatedClaims = await generateClaims(problemStatement, productDescription);\r\n      setClaims(generatedClaims);\r\n    } catch (error) {\r\n      alert(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddManualEvidence = (claimId, evidence) => {\r\n    setClaims(claims.map(claim => \r\n      claim.id === claimId \r\n        ? { ...claim, evidence: [...(claim.evidence || []), { type: 'manual', content: evidence }] }\r\n        : claim\r\n    ));\r\n  };\r\n\r\n  const handleAskAI = async (claimId) => {\r\n    setLoading(true);\r\n    try {\r\n      const claim = claims.find(c => c.id === claimId);\r\n      const evidence = await getAIEvidence(claim.text, { \r\n        problemStatement, \r\n        productDescription \r\n      });\r\n      \r\n      setClaims(claims.map(c => \r\n        c.id === claimId \r\n          ? { ...c, evidence: [...(c.evidence || []), { type: 'ai', content: evidence }] }\r\n          : c\r\n      ));\r\n    } catch (error) {\r\n      alert(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleFileUpload = async (event) => {\r\n    const file = event.target.files[0];\r\n    try {\r\n      const uploadedDoc = await uploadDocument(file);\r\n      setDocuments([...documents, uploadedDoc]);\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n  };\r\n\r\n  const handleAskDocuments = async (claimId) => {\r\n    if (documents.length === 0) {\r\n      alert('Please upload documents first');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const claim = claims.find(c => c.id === claimId);\r\n      const evidence = await getDocumentEvidence(claim.text, documents.map(d => d.id));\r\n      \r\n      setClaims(claims.map(c => \r\n        c.id === claimId \r\n          ? { ...c, evidence: [...(c.evidence || []), { type: 'document', content: evidence }] }\r\n          : c\r\n      ));\r\n    } catch (error) {\r\n      alert(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleProceedToSummary = () => {\r\n    // Check if all claims have evidence\r\n    const allClaimsHaveEvidence = claims.every(claim => \r\n      claim.evidence && claim.evidence.length > 0\r\n    );\r\n\r\n    if (allClaimsHaveEvidence) {\r\n      navigate('/summary', { state: { claims } });\r\n    } else {\r\n      alert('Please provide evidence for all claims before proceeding');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"claims-page\">\r\n      {/* Initial Input Form */}\r\n      {claims.length === 0 && (\r\n        <form onSubmit={handleGenerateClaims}>\r\n          <textarea\r\n            value={problemStatement}\r\n            onChange={(e) => setProblemStatement(e.target.value)}\r\n            placeholder=\"Enter problem statement\"\r\n            required\r\n          />\r\n          <textarea\r\n            value={productDescription}\r\n            onChange={(e) => setProductDescription(e.target.value)}\r\n            placeholder=\"Enter product description\"\r\n            required\r\n          />\r\n          <button type=\"submit\" disabled={loading}>\r\n            Generate Claims\r\n          </button>\r\n        </form>\r\n      )}\r\n\r\n      {/* Claims List and Evidence Collection */}\r\n      {claims.length > 0 && (\r\n        <>\r\n          <ClaimsList\r\n            claims={claims}\r\n            onSelectClaim={setSelectedClaim}\r\n            onAddManualEvidence={handleAddManualEvidence}\r\n            onAskAI={handleAskAI}\r\n            onAskDocuments={handleAskDocuments}\r\n          />\r\n          \r\n          <div className=\"document-upload\">\r\n            <input\r\n              type=\"file\"\r\n              accept=\".pdf,.csv\"\r\n              onChange={handleFileUpload}\r\n            />\r\n          </div>\r\n\r\n          <button \r\n            onClick={handleProceedToSummary}\r\n            disabled={loading || !claims.every(claim => claim.evidence?.length > 0)}\r\n          >\r\n            Proceed to Summary\r\n          </button>\r\n        </>\r\n      )}\r\n\r\n      {loading && <div className=\"loading\">Loading...</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ClaimsPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}