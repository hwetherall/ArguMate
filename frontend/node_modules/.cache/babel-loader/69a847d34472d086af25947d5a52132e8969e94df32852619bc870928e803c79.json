{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const generateClaims = async (problemStatement, productDescription) => {\n  try {\n    const response = await apiClient.post('/api/ai/generate-claims', {\n      problemStatement,\n      productDescription\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to generate claims: ' + error.message);\n  }\n};\nexport const getAIEvidence = async (claim, context) => {\n  try {\n    const response = await apiClient.post('/api/ai/ask-ai', {\n      claim,\n      context\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to get AI evidence: ' + error.message);\n  }\n};\nexport const getDocumentEvidence = async (claim, documentIds) => {\n  try {\n    const response = await apiClient.post('/api/ai/ask-docs', {\n      claim,\n      documentIds\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to get document evidence: ' + error.message);\n  }\n};\nexport const scoreClaims = async claims => {\n  try {\n    const response = await apiClient.post('/api/ai/score', {\n      claims\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to score claims: ' + error.message);\n  }\n};\nexport const uploadDocument = async file => {\n  try {\n    const formData = new FormData();\n    formData.append('document', file);\n    const response = await apiClient.post('/api/documents/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to upload document: ' + error.message);\n  }\n};\nexport const getClaimEvidence = async (claim, problemStatement, productDescription) => {\n  try {\n    const response = await apiClient.post('/api/ai/get-claim-evidence', {\n      claim,\n      problemStatement,\n      productDescription\n    });\n    return response.data.evidence;\n  } catch (error) {\n    console.error('API Error:', error.response || error);\n    throw new Error(`Failed to get AI evidence: ${error.message}`);\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","generateClaims","problemStatement","productDescription","response","post","data","error","Error","message","getAIEvidence","claim","context","getDocumentEvidence","documentIds","scoreClaims","claims","uploadDocument","file","formData","FormData","append","getClaimEvidence","evidence","console"],"sources":["C:/Users/hweth/OneDrive/Desktop/Innovera/Rapid Prototyping/ArguMate/frontend/src/services/apiClient.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nexport const generateClaims = async (problemStatement, productDescription) => {\r\n  try {\r\n    const response = await apiClient.post('/api/ai/generate-claims', {\r\n      problemStatement,\r\n      productDescription,\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to generate claims: ' + error.message);\r\n  }\r\n};\r\n\r\nexport const getAIEvidence = async (claim, context) => {\r\n  try {\r\n    const response = await apiClient.post('/api/ai/ask-ai', {\r\n      claim,\r\n      context,\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to get AI evidence: ' + error.message);\r\n  }\r\n};\r\n\r\nexport const getDocumentEvidence = async (claim, documentIds) => {\r\n  try {\r\n    const response = await apiClient.post('/api/ai/ask-docs', {\r\n      claim,\r\n      documentIds,\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to get document evidence: ' + error.message);\r\n  }\r\n};\r\n\r\nexport const scoreClaims = async (claims) => {\r\n  try {\r\n    const response = await apiClient.post('/api/ai/score', { claims });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to score claims: ' + error.message);\r\n  }\r\n};\r\n\r\nexport const uploadDocument = async (file) => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('document', file);\r\n    \r\n    const response = await apiClient.post('/api/documents/upload', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to upload document: ' + error.message);\r\n  }\r\n};\r\n\r\nexport const getClaimEvidence = async (claim, problemStatement, productDescription) => {\r\n  try {\r\n    const response = await apiClient.post('/api/ai/get-claim-evidence', {\r\n      claim,\r\n      problemStatement,\r\n      productDescription\r\n    });\r\n    return response.data.evidence;\r\n  } catch (error) {\r\n    console.error('API Error:', error.response || error);\r\n    throw new Error(`Failed to get AI evidence: ${error.message}`);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}